Alan Shore: While many people embrace the promise of tomorrow,
too few celebrate the joy of now

----------------------------------------------------------------------

-- computers donâ€™t do what you want them to do, only what you tell
them to do --

The mindset behind a great programmer

Coding is a fun and valuable (and at sometime, a little tiring)
skill. There are many perks of learning to code: better salary, awesome
job environment, a opportunity to create a app which a thousand people
will use and thank you for it, working from home etc. Everyone is
going to talk about the benefits of being a programmer but seriously,
nearly no one tells us about the mindset we must attain in order to be a
successful programmer.  I remember when me and my friends first started
coding in C in the first semester in our university. We were all afraid
and terribly overwhelmed. Later, some of us excelled at writing codes,
and others began to hate coding and freak out on any assignment that
involved coding. What was the big difference between them? the latter
thought the former were more skilled problem solving geniuses who ate
code for breakfast in the morning. But that was assumption was wrong,
horribly wrong. The only difference between them and the former group was
the programming mindset. Mindset that have produced brilliant programmers
in the world (Bill Gates, Mark Zuckerberg, Jeff Bezos to name a few).So
what is this mindset about? Lets dig in!

1) Make a mental solution of the problem in your mind first

It looks like this: you are given a program,now where do you start? Most
people will fold their sleeves and jump right in the code; and when they
get stuck they freak out about how they want to end their life and how
much clueless and helpless they are about what the heck went wrong in
their code (or logic). While some pro programmers want to first draw
a mental picture of how they are going to solve it, break it down into
digestive pieces and then start to code.When they get stuck, they exactly
know where their code/logic went wrong because they have been testing
the snippets alongside one step at a time.

2) Learn to get in the game and donâ€™t stop until you get the job done

The most challenging aspects of learning to code is acknowledging that it
is going to be a little challenging at first. You will have to require a
lot of patience especially in the beginning. There are literally times
when a totally confusing error comes in the debugger only to know that
all you were missing was a semi colon or something non significant and
its really frustrating at times. What you can do is check and test your
code line by line to figure out the bug. Sometimes I like to comment
part of my code and run it and when the part runs perfectly then I start
decommenting and running the lines one by one and to root out the bug.

3) Learn to deal with the bug frustration

There are going to be times when the code wont work no matter how long
you try and what you do. Know that even the most senior developers also
have this frustration from time to time and is perfectly normal. What
you can do in this time change your posture or surrounding or simply
gulp down some water and get some fresh air. Or you can take a break
and relax or do some other thing on your to-do. You may get the light
bulb a some time later or the next time you sit down after your break.

4)Reach out for help

Sometimes reaching out for help can save you tons of time,headaches and
heartbreaks. This is the mistake I made when I was starting out, mostly
because I was shy and was ashamed of asking for help. Please donâ€™t do
that! Start by googling the error script. If you cant find a suitable
solution, ask for help in a reputable forum (I recommend StackOverflow).
If you know any friend who codes too, ask them for help.  You can also
join various facebook groups where you can ask for help.  And remember,
there is no shame in asking for help. We all get stuck at something and
its best to reach out whenever you can.

5) Be adaptive and willing to learn

Just get it, tech changes a lot. A lot of new language, framework etc
come into scene from time to time (but the basic concepts and theories
almost remains the same). Be willing to learn a new language, framework
etc when the time comes because in programming, being adaptive is one
of the most key skill that cant help you prevail in programming.

With this said, remember to keep the big picture in mind, be creative,
and enjoy the ride! and know that you wont break anything (but can be
required to resolve a few bugs ðŸ˜› )

--------------------------------------------------------------------
You are only stupid if you refuse to learn.

Logic is the study of cause and effect. Given these inputs, and that
process (cause), what will the output (effect) be?

Whether it is math, psychology, sociology, computer programming,
chemistry, or electrical wiring, logic is still a relationship between
inputs, processes, and output.

One way to improve logic skills is to build things. When you build
something, you are taking raw materials (input) and doing a process
(cause) to create a product (effect). But don't learn just one way to
do it; test different processes. Observe how the different processes
affect the production and the final product.

Use your memory to advantage when studying logic. Observe everything,
everywhere, every day. Observe how different processes affect things. The
more you've observed effect, the easier it becomes to predict the
effect, and the easier it becomes to determine the best process (cause)
to achieve the desired effect.

--------------------------------------------------------------------
Conclusion

As a developer, there is too much out there to master everything. Donâ€™t
even try. Learn how you work best as a developer, build a toolset that
fits you, and donâ€™t try to have all the answers. Focus on learning
how to find the answers quickly.

Whether youâ€™re just getting started with coding or your fingers are
already well worn by your favorite mechanical keyboard, I hope this post
has been useful for you.

Remember: No one expects you to know everything. Have fun, and never
stop learning.

----------------------------------------------------------------------

I love this Python newsletter by Dan Bader and I am sure that you will
love it.

When I was 15-years old I'd set my mind on becoming the world's greatest
guitarist.

I was already a huge nerd at the timeâ€”so one beautiful Sunday morning
I sat down for a few hours and mapped out a learning plan for this
endeavour.

My ingenious plan to turn me into a virtuoso guitarist looked like
this: "Here's a stack of CDs from bands that I like. Iâ€™m just going
to rotate through these 5 different genres every day and practice for
a few hours. Thatâ€™ll give me maximum exposure and Iâ€™ll be able
to rock it out in no time." Come Monday, off I went and bought a nice
stack of practice books and magazine lessons for the top 20 blues, jazz,
and metal songs I liked.

Pretty sure I also threw in some 16 minute Pink Floyd solos for good
measure... I dragged home the haulâ€”and without even knowing how to
fret a basic power chord, I dove into lessons for these wildly differing
styles.

And, guess what happened... Two months later I had made exactly ZERO
progress and was ready to give up the guitar altogether. Whoops.

Looking back, I know now what doomed my "ingenious" plan to fail:

Practicing all these different styles of music at the same time confused
my brain and mixed up my muscle memory.

All this "mental context switching" didnâ€™t help. It just added overhead
and made sure I spun my wheels aimlessly.

Here's why I'm telling you this:

It's easy to make the same mistake when it comes to learning Python.

There's no point denying itâ€”modern software development is super
complex.

And it's getting more complicated by the hour... What looks like a
relatively clearly skill set from the outside, turns into a fractal
topic as soon as you look closer:

Setting up a development environment, grasping the basic syntax of
the language, knowing standard data structures and algorithms and when
to apply them, understanding Git and source control, TDD and writing
automated tests, designing programs for maintainability, ...

(Taking a deep breath here.)

.. learning how to organize your source code, error handling, what
frameworks to use and when, interacting with PostgreSQL and MySQL
databases, object-oriented programming, static code analysis, Django,
Flask, web applications, APIs, design patterns, linters, code coverage,
continuous integration, ... Whoa, buddy.

There's simply A TON of stuff you need to pick upâ€”and it get's more
difficult if you try to cover it all at the same time.

If you find yourself in that situation, my advice would be to keep
"mental context switches" at a minimum.

Donâ€™t repeat my mistake by trying to learn blues, jazz, and metal at
the same time.

Itâ€™s too easy to get frazzled and to lose motivation that way. It can
drag your learning progress to a halt.

Instead, I found it helps to deliberately limit your choices. Putting
some constraints in place will help enhance your creativity and focus:

Concentrate on getting good at one programming language
(e.g. Python.) Learn how to set up and work with just one database
(e.g. PostgreSQL.) Learn how to use one web framework (e.g. Django.) Use
one source control tool (e.g. Git.) And so on.

Focus on each thing you add to the mix exclusively for some time. Solve
problems with the tools and techniques you already know.

Let things settle a bit before you start working on a new skill. It's
tough, but I know you can see through it and succeed.

Good luck, and...

Happy Pythoning!

â€” Dan Bader

Chris Underhay from "facebook"

Try starting with just recreating an app you regularly use from scratch
and add features you thought could improve it, in time you should be
able to train your brain to think of new features and as such spark your
creative mind, after approaching things like that for long enough you'll
start to get even grander ideas, until you arrive at a project all of your
own.  This is taken from the Writers mneumonic preparation techniques,
where you start with off-shoot stories from an existing storyline, and
add characters one at a time, then you take one of those characters and
form a short story of them, chapterise it with another short story of
another character, reference a third character in all three then form a
chronicle based in that pre-written world, at that point the creative
centres of your brain will be highly peaked and ready to offer up the
goods. Forcing anything that requires complex planning doesn't work,
always approach things in steps and break it up to smaller tasks
